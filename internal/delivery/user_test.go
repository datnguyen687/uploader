package delivery_test

import (
	"bytes"
	"encoding/json"
	"errors"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/http/httptest"
	"testing"
	"uploader/internal/delivery"
	"uploader/mocks"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

var (
	fakeData  = "{}"
	largeData
)

func TestPingOk(t *testing.T) {
	engine := gin.Default()

	uc := mocks.IUsecase{}

	d := delivery.NewHttpDelivery(&uc)
	d.Init(engine, true, false)

	expectedResp := delivery.BasicResponse{
		Code:    delivery.StatusCodeOk,
		Message: delivery.StatusCodeOk.Message(),
	}

	w := httptest.NewRecorder()
	req, err := http.NewRequest(http.MethodGet, "/v1/ping", nil)
	assert.NoError(t, err)

	engine.ServeHTTP(w, req)

	data, err := ioutil.ReadAll(w.Body)
	assert.Nil(t, err)

	var resp delivery.BasicResponse
	json.Unmarshal(data, &resp)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Equal(t, expectedResp, resp)
}

func TestBatchUserOk(t *testing.T) {
	engine := gin.Default()

	filename := "payload.json"

	uc := mocks.IUsecase{}
	uc.On("Upload", mock.Anything, mock.AnythingOfType("string"), mock.Anything).Return(nil)

	d := delivery.NewHttpDelivery(&uc)
	d.Init(engine, false, false)

	body := new(bytes.Buffer)
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("file", filename)
	assert.NoError(t, err)
	part.Write([]byte(fakeData))
	writer.Close()

	req, err := http.NewRequest("POST", "/v1/user/batch", body)
	assert.NoError(t, err)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	w := httptest.NewRecorder()

	engine.ServeHTTP(w, req)

	data, err := ioutil.ReadAll(w.Body)
	assert.Nil(t, err)

	var resp delivery.BasicResponse
	err = json.Unmarshal(data, &resp)
	assert.NoError(t, err)

	assert.Equal(t, http.StatusOK, w.Code)

	expectedResp := delivery.BasicResponse{
		Code:    delivery.StatusCodeOk,
		Message: delivery.StatusCodeOk.Message(),
	}
	assert.Equal(t, expectedResp, resp)
}

func TestBatchUserMissingFileField(t *testing.T) {
	engine := gin.Default()

	filename := "payload.json"

	uc := mocks.IUsecase{}
	uc.On("Upload", mock.Anything, mock.AnythingOfType("string"), mock.Anything).Return(nil)

	d := delivery.NewHttpDelivery(&uc)
	d.Init(engine, false, false)

	body := new(bytes.Buffer)
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("fake", filename)
	assert.NoError(t, err)
	part.Write([]byte(fakeData))
	writer.Close()

	req, err := http.NewRequest("POST", "/v1/user/batch", body)
	assert.NoError(t, err)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	w := httptest.NewRecorder()

	engine.ServeHTTP(w, req)

	data, err := ioutil.ReadAll(w.Body)
	assert.Nil(t, err)

	var resp delivery.BasicResponse
	err = json.Unmarshal(data, &resp)
	assert.NoError(t, err)

	assert.Equal(t, http.StatusBadRequest, w.Code)
}

func TestBatchUserMissingFileBody(t *testing.T) {
	engine := gin.Default()

	filename := "payload.json"

	uc := mocks.IUsecase{}
	uc.On("Upload", mock.Anything, mock.AnythingOfType("string"), mock.Anything).Return(nil)

	d := delivery.NewHttpDelivery(&uc)
	d.Init(engine, false, false)

	body := new(bytes.Buffer)
	writer := multipart.NewWriter(body)
	_, err := writer.CreateFormFile("file", filename)
	assert.NoError(t, err)

	req, err := http.NewRequest("POST", "/v1/user/batch", body)
	assert.NoError(t, err)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	w := httptest.NewRecorder()

	engine.ServeHTTP(w, req)

	data, err := ioutil.ReadAll(w.Body)
	assert.Nil(t, err)

	var resp delivery.BasicResponse
	err = json.Unmarshal(data, &resp)
	assert.NoError(t, err)

	assert.Equal(t, http.StatusBadRequest, w.Code)
}

func TestBatchUserFileTooBig(t *testing.T) {
	engine := gin.Default()

	filename := "payload.json"

	uc := mocks.IUsecase{}
	uc.On("Upload", mock.Anything, mock.AnythingOfType("string"), mock.Anything).Return(nil)

	d := delivery.NewHttpDelivery(&uc)
	d.Init(engine, false, false)

	body := new(bytes.Buffer)
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("fake", filename)
	assert.NoError(t, err)
	part.Write([]byte(largeData))
	writer.Close()

	req, err := http.NewRequest("POST", "/v1/user/batch", body)
	assert.NoError(t, err)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	w := httptest.NewRecorder()

	engine.ServeHTTP(w, req)

	data, err := ioutil.ReadAll(w.Body)
	assert.Nil(t, err)

	var resp delivery.BasicResponse
	err = json.Unmarshal(data, &resp)
	assert.NoError(t, err)

	assert.Equal(t, http.StatusBadRequest, w.Code)
}

func TestBatchUserUnableToUpload(t *testing.T) {
	engine := gin.Default()

	filename := "payload.json"

	uc := mocks.IUsecase{}
	uc.On("Upload", mock.Anything, mock.AnythingOfType("string"), mock.Anything).Return(errors.New("unable to upload"))

	d := delivery.NewHttpDelivery(&uc)
	d.Init(engine, false, false)

	body := new(bytes.Buffer)
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("file", filename)
	assert.NoError(t, err)
	part.Write([]byte(fakeData))
	writer.Close()

	req, err := http.NewRequest("POST", "/v1/user/batch", body)
	assert.NoError(t, err)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	w := httptest.NewRecorder()

	engine.ServeHTTP(w, req)

	data, err := ioutil.ReadAll(w.Body)
	assert.Nil(t, err)

	var resp delivery.BasicResponse
	err = json.Unmarshal(data, &resp)
	assert.NoError(t, err)

	assert.Equal(t, http.StatusInternalServerError, w.Code)
}
